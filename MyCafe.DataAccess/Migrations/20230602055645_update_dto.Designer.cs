// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyCafe.DataAccess;

#nullable disable

namespace MyCafe.DataAccess.Migrations
{
    [DbContext(typeof(MyCafeDbContext))]
    [Migration("20230602055645_update_dto")]
    partial class update_dto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyCafe.Models.Cafe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cafes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Chinees taste",
                            Location = "Kollupitiya",
                            Name = "Chinese Cafe"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Indian taste",
                            Location = "Wellawatte",
                            Name = "Indian Cafe"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Local taste",
                            Location = "Galle",
                            Name = "Sri Lankan Cafe"
                        });
                });

            modelBuilder.Entity("MyCafe.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CafeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CafeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ishmaemail@gmail.com",
                            Gender = 0,
                            Name = "Ishma Madu",
                            Phone = "0771234567",
                            StartDate = new DateTime(2023, 6, 2, 11, 26, 45, 9, DateTimeKind.Local).AddTicks(9091)
                        },
                        new
                        {
                            Id = 2,
                            Email = "ishmaemail@gmail.com",
                            Gender = 1,
                            Name = "Peshani Bandara",
                            Phone = "0711234567",
                            StartDate = new DateTime(2023, 6, 2, 11, 26, 45, 9, DateTimeKind.Local).AddTicks(9101)
                        },
                        new
                        {
                            Id = 3,
                            Email = "ishmaemail@gmail.com",
                            Gender = 0,
                            Name = "Chaminda Herath",
                            Phone = "0751234567",
                            StartDate = new DateTime(2023, 6, 2, 11, 26, 45, 9, DateTimeKind.Local).AddTicks(9102)
                        },
                        new
                        {
                            Id = 4,
                            Email = "ishmaemail@gmail.com",
                            Gender = 0,
                            Name = "Denesh Manjula",
                            Phone = "0761234567",
                            StartDate = new DateTime(2023, 6, 2, 11, 26, 45, 9, DateTimeKind.Local).AddTicks(9103)
                        });
                });

            modelBuilder.Entity("MyCafe.Models.Employee", b =>
                {
                    b.HasOne("MyCafe.Models.Cafe", "Cafe")
                        .WithMany("Employees")
                        .HasForeignKey("CafeId");

                    b.Navigation("Cafe");
                });

            modelBuilder.Entity("MyCafe.Models.Cafe", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
